* RELEASE NOTES FOR VERSION 3.7
** Requirements
Biber version 2.7 is required for biblatex 3.7

Bugfix release.

* RELEASE NOTES FOR VERSION 3.6
** Requirements
Biber version 2.6 is required for biblatex 3.6

This is a minor bugfix release.

* RELEASE NOTES FOR VERSION 3.5
** Requirements
Biber version 2.6 is required for biblatex 3.5

** Name support
- *INCOMPATIBLE CHANGE* The labelling system has been generalised
  to be able to deal better with names. ~\DeclareLabelalphaTemplate~ no
  longer uses hard-coded name parts (prefix, family) when extracting label
  parts from name fields. Name field label extraction now obeys the new
  ~\DeclareLabelalphaNameTemplate~ specification which details how to extract
  label information from each namepart known to the data model. The default
  setting is backwards compatible with the old hard-coded behaviour.
  However, if you have custom ~\DeclareLabelalphaTemplate~ specifications,
  you should note that the "pcompound" and "pstrwidth" options to ~\field~
  are now gone and replaced with the relevant settings on ~\namepart~ in
  ~\DeclareLabelalphaNameTemplate~. The old options will generate warnings.
  It is too complex to provide backwards compat for this, sorry - please
  update your templates if necessary. This is one of the last changes
  needed to fully generalise name handling.

** Date input and output
Major enhancements to the dates parsed by biblatex and the output formats
available. Biblatex now supports [[http://www.loc.gov/standards/datetime/pre-submission.html][EDTF]] level 0 and 1. This is an enhanced
ISO8601v2004 format suitable for bibliographic data. The new support is a
superset of the previous limited ISO8601 support. Times are now fully
supported in various formats as online sources become more common and time
specifications for such sources are increasingly important. Tests and
localisation strings are provided to use EDTF information about date
uncertainty, era, approximation etc. in styles. A new example document
(96-dates.tex) is provided which demonstrates the new features. See the PDF
manual and its changelog for details of usage. The new date format
functionality is backwards compatible. The following changes are more
detailed and mostly of interest to style authors:

- The ~iso8601~ date output format is now called ~edtf~. The old name will
  automatically use ~edtf~ and issue a deprecation warning.
- ~\bibdatedash~ is now ~\bibdaterangesep~ as this name is more
  informative and more descriptive of how it is actually used. A backwards
  compat alias is provided.
- Pre-biblatex 2.0 legacy sorting scheme definition macros ~\name~ and
  ~\list~ are now deprecated with warnings.
- *INCOMPATIBLE CHANGE* The ~labeldate~ option is renamed to
  ~labeldateparts~. The ~datelabel~ option is renamed to ~labeldate~ to
  provide consistency with all other date options. Backwards compatibility
  is provided and warnings will be issued.
- The new date system necessitated changes to the default year printing
  routine for citations in the default authoryear styles. If you wish to
  take advantage of the new date features like circa, uncertainty and eras,
  when printing citations in authoryear styles, see the enhanced
  ~cite:labelyear+extrayear~ macros in any of the default authoryear
  styles.
- The ~labelyear~ field was inconsistently implemented and in fact could
  sometimes contain a date range which made handling it rather difficult.
  It is now guaranteed to contain only one year, when it is a copy of an
  existing datepart field found by ~\DeclareLabeldate~ (~labelyear~ can
  contain a literal/bibstring or non date field too). A new field
  ~labelendyear~ will contain the end of the labeldate year range. The same
  applies to labelmonth and labelday.
- The internal macros ~\mkbibrange*~ have all been changed to
  ~\mkdaterange*~ to make the name more obvious (since they only deal with
  dates) and for consistency with the new ~\mktimerange*~ macros. These
  macros are usually only used in style .lbx files and the old names will
  generate a deprecation warning.
- The option ~datezeros~ was inconsistent as it did not enforce zeros when
  set to 'true', it merely preserved the field. In the new date internals,
  leading zeros are not present after date parsing as this should always be
  a formatting/style decision. Now, ~datezeros~ enforces leading zeros and
  also handles all date parts.
- ~\mkdatezeros~ has been replaced with ~\mkyearzeros~, ~\mkmonthzeros~ and
  ~\mkdayzeros~ due to the date internals changes which are more consistent
  about integer formats of date parts. ~\mkdatezeros~ now generates a
  deprecation warning and calls ~\mkmonthzeros~ which is backwards compatible
  with its old behaviour.
- *INCOMPATIBLE CHANGE* The .bbl field ~datelabelsource~ has been renamed to
  ~labeldatesource~ to prevent confusion with other fields. In the unlikely
  event that you referenced this field in a style, please change the name.
- *INCOMPATIBLE CHANGE* The macro ~\printdatelabel~ has been renamed to
  ~\printlabeldate~ in line with the naming of all other date printing
  macros. Please use the new name. The old one will issue a deprecation warning.
- *INCOMPATIBLE CHANGE* The macro ~\printdatelabelextra~ has been renamed to
  ~\printlabeldateextra~ in line with the naming of all other date printing
  macros. Please use the new name. The old one will issue a deprecation warning.

** Misc changes
- The experimental RIS format support is no longer available as it was
  rarely used and made biber maintenance more complicated. RIS is a very
  primitive format and not much use anyway.
- *INCOMPATIBLE CHANGE* The ~singletitle~ option no longer considers the
  presence of labeltitle if labelname does not exist. This has always been
  potentially confusing. For several versions now, there has been a
  separate test and option for labeltitle called "uniquetitle".
- *INCOMPATIBLE CHANGE* The ~sortgiveninits~ option has been deprecated and
  the functionality generalised. It is replaced by the "inits" option to
  ~\namepart~ in ~\DeclareSortingNamekeyScheme~. Any nameparts may now
  therefore be sorted using initials only.
- *INCOMPATIBLE CHANGE* The sorting subsystem in biber has been completely
  re-engineered to support better sorting of different datatypes.
  Previously, due to bibtex limitations, all sorting was lexical, even for
  numbers. This is why the padding options for things like volume in the
  default sorting specifications existed - so that lexical sorts for
  numbers would work. With the enhancement of the date parsing routines to
  include negative years, in order to sort these properly, it was time to
  switch to a better sorting method. As a result, the datatypes of fields
  is now a bit stricter, as it should be. Expect more changes in this
  direction but for this release, the datatype of the following fields in
  the default data model have been changed to 'integer':

  - number
  - sortyear
  - volume
  - volumes

  Integer datatypes no longer need padding or literal fallbacks in the
  sorting scheme definitions since they are now sorted properly as
  integers. Such datatype changes only effect sorting.


